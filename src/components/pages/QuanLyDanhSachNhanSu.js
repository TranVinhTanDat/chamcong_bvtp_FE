import React, { useState, useEffect, useCallback } from 'react';
import axiosInstance from '../../utils/axiosInstance';
import { toast } from 'react-toastify';
import { Table, Button, Modal, Form, Pagination, Spinner } from 'react-bootstrap';
import DatePicker from 'react-datepicker';
import 'react-datepicker/dist/react-datepicker.css';
import { format, parse } from 'date-fns';

function QuanLyDanhSachNhanSu() {
  const [nhanViens, setNhanViens] = useState([]);
  const [page, setPage] = useState(0);
  const [totalPages, setTotalPages] = useState(0);
  const [size] = useState(10);
  const [showModal, setShowModal] = useState(false);
  const [isEdit, setIsEdit] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');

  // *** TH√äM M·ªöI: State cho filter khoa ph√≤ng (ch·ªâ ADMIN) ***
  const [selectedKhoaPhongFilter, setSelectedKhoaPhongFilter] = useState('');

  const [currentNhanVien, setCurrentNhanVien] = useState({
    id: null,
    hoTen: '',
    email: '',
    maNV: '',
    ngayThangNamSinh: null,
    soDienThoai: '',
    khoaPhong: { id: '' },
    chucVu: { id: '' },
  });
  const [khoaPhongs, setKhoaPhongs] = useState([]);
  const [chucVus, setChucVus] = useState([]);

  const role = localStorage.getItem('role');
  const khoaPhongId = localStorage.getItem('khoaPhongId');

  // *** S·ª¨A L·∫†I: Fetch danh s√°ch nh√¢n vi√™n v·ªõi logic ph√¢n quy·ªÅn r√µ r√†ng ***
  const fetchNhanViens = useCallback(async () => {
    setIsLoading(true);
    try {
      const params = { page, size };

      // *** LOGIC PH√ÇN QUY·ªÄN FILTER KHOA PH√íNG ***
      if (role === 'ADMIN') {
        // ADMIN: C√≥ th·ªÉ ch·ªçn khoa ph√≤ng c·ª• th·ªÉ ho·∫∑c xem t·∫•t c·∫£
        if (selectedKhoaPhongFilter) {
          params.khoaPhongId = selectedKhoaPhongFilter;
        }
        // N·∫øu kh√¥ng ch·ªçn khoa ph√≤ng n√†o th√¨ xem t·∫•t c·∫£ (kh√¥ng truy·ªÅn khoaPhongId)
      } else {
        // C√°c role kh√°c: Ch·ªâ xem khoa ph√≤ng c·ªßa m√¨nh
        params.khoaPhongId = khoaPhongId;
      }

      // Th√™m search term n·∫øu c√≥
      if (searchTerm) {
        params.search = searchTerm;
      }

      console.log('üîç Fetch params:', {
        role,
        userKhoaPhongId: khoaPhongId,
        selectedFilter: selectedKhoaPhongFilter,
        finalParams: params
      });

      const response = await axiosInstance.get('/nhanvien', { params });
      setNhanViens(response.data.content || []);
      setTotalPages(response.data.totalPages || 0);
    } catch (error) {
      console.error('Error fetching nhanviens:', error.response?.data || error.message);
      toast.error(error.response?.data || 'L·ªói khi l·∫•y danh s√°ch nh√¢n vi√™n');
    } finally {
      setIsLoading(false);
    }
  }, [page, size, role, khoaPhongId, searchTerm, selectedKhoaPhongFilter]);

  // Fetch danh s√°ch khoa/ph√≤ng v√† ch·ª©c v·ª•
  const fetchKhoaPhongsAndChucVus = async () => {
    try {
      const khoaPhongRes = await axiosInstance.get('/khoa-phong');
      setKhoaPhongs(khoaPhongRes.data || []);
    } catch (error) {
      console.error('Error fetching khoa-phong:', error.response?.data || error.message);
      toast.error('L·ªói khi l·∫•y danh s√°ch khoa/ph√≤ng');
    }

    try {
      const chucVuRes = await axiosInstance.get('/chuc-vu');
      setChucVus(chucVuRes.data || []);
    } catch (error) {
      console.error('Error fetching chuc-vu:', error.response?.data || error.message);
      toast.error('L·ªói khi l·∫•y danh s√°ch ch·ª©c v·ª•');
    }
  };

  useEffect(() => {
    fetchNhanViens();
  }, [fetchNhanViens]);

  useEffect(() => {
    fetchKhoaPhongsAndChucVus();
  }, []);

  // *** TH√äM H√ÄM X·ª¨ L√ù THAY ƒê·ªîI FILTER KHOA PH√íNG ***
  const handleKhoaPhongFilterChange = (e) => {
    setSelectedKhoaPhongFilter(e.target.value);
    setPage(0); // Reset v·ªÅ trang ƒë·∫ßu ti√™n khi thay ƒë·ªïi filter
  };

  // *** H√ÄM L·∫§Y T√äN KHOA PH√íNG HI·ªÜN T·∫†I CHO HI·ªÇN TH·ªä ***
  const getCurrentKhoaPhongName = () => {
    if (role === 'ADMIN') {
      if (selectedKhoaPhongFilter) {
        const selectedKP = khoaPhongs.find(kp => kp.id.toString() === selectedKhoaPhongFilter);
        return selectedKP?.tenKhoaPhong || 'Khoa ph√≤ng kh√¥ng x√°c ƒë·ªãnh';
      } else {
        return 'T·∫•t c·∫£ khoa ph√≤ng';
      }
    } else {
      const userKP = khoaPhongs.find(kp => kp.id.toString() === khoaPhongId);
      return userKP?.tenKhoaPhong || 'Khoa ph√≤ng kh√¥ng x√°c ƒë·ªãnh';
    }
  };

  const preparePayload = () => {
    const formattedNgaySinh = currentNhanVien.ngayThangNamSinh
      ? format(currentNhanVien.ngayThangNamSinh, 'dd/MM/yyyy')
      : null;

    const processedMaNV = currentNhanVien.maNV && currentNhanVien.maNV.trim()
      ? currentNhanVien.maNV.trim()
      : null;

    const processedSDT = currentNhanVien.soDienThoai && currentNhanVien.soDienThoai.trim()
      ? currentNhanVien.soDienThoai.trim()
      : null;

    // *** THAY ƒê·ªîI: Email c√≥ th·ªÉ null ***
    const processedEmail = currentNhanVien.email && currentNhanVien.email.trim()
      ? currentNhanVien.email.trim()
      : null;

    return {
      hoTen: currentNhanVien.hoTen.trim(),
      email: processedEmail, // Thay ƒë·ªïi t·ª´ currentNhanVien.email.trim() th√†nh processedEmail
      maNV: processedMaNV,
      ngayThangNamSinh: formattedNgaySinh,
      soDienThoai: processedSDT,
      khoaPhong: { id: currentNhanVien.khoaPhong.id },
      chucVu: currentNhanVien.chucVu.id ? { id: currentNhanVien.chucVu.id } : null,
    };
  };

  const validateForm = () => {
    if (!currentNhanVien.hoTen || !currentNhanVien.hoTen.trim()) {
      toast.error('Vui l√≤ng nh·∫≠p h·ªç t√™n');
      return false;
    }

    // *** THAY ƒê·ªîI: Email kh√¥ng c√≤n b·∫Øt bu·ªôc ***
    // N·∫øu c√≥ email th√¨ ph·∫£i h·ª£p l·ªá, nh∆∞ng kh√¥ng b·∫Øt bu·ªôc ph·∫£i c√≥
    if (currentNhanVien.email && currentNhanVien.email.trim()) {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(currentNhanVien.email.trim())) {
        toast.error('Email kh√¥ng h·ª£p l·ªá');
        return false;
      }
    }

    if (!currentNhanVien.khoaPhong.id) {
      toast.error('Vui l√≤ng ch·ªçn khoa/ph√≤ng');
      return false;
    }

    if (currentNhanVien.maNV && currentNhanVien.maNV.trim()) {
      const maNV = currentNhanVien.maNV.trim();
      if (maNV.length < 2) {
        toast.error('M√£ nh√¢n vi√™n ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±');
        return false;
      }
      if (maNV.length > 50) {
        toast.error('M√£ nh√¢n vi√™n kh√¥ng ƒë∆∞·ª£c qu√° 50 k√Ω t·ª±');
        return false;
      }
    }

    if (currentNhanVien.soDienThoai && currentNhanVien.soDienThoai.trim()) {
      const sdt = currentNhanVien.soDienThoai.trim();
      const phoneRegex = /^[0-9+\-\s()]+$/;
      if (!phoneRegex.test(sdt)) {
        toast.error('S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá');
        return false;
      }
      if (sdt.length < 10 || sdt.length > 15) {
        toast.error('S·ªë ƒëi·ªán tho·∫°i ph·∫£i c√≥ t·ª´ 10-15 k√Ω t·ª±');
        return false;
      }
    }

    return true;
  };

  const handleSaveNhanVien = async () => {
    if (!validateForm()) {
      return;
    }

    const payload = preparePayload();
    setIsLoading(true);
    try {
      if (isEdit) {
        await axiosInstance.put(`/nhanvien/${currentNhanVien.id}`, payload);
        toast.success('C·∫≠p nh·∫≠t nh√¢n vi√™n th√†nh c√¥ng');
      } else {
        await axiosInstance.post('/nhanvien', payload);
        toast.success('Th√™m nh√¢n vi√™n th√†nh c√¥ng');
      }
      setShowModal(false);
      fetchNhanViens();
    } catch (error) {
      console.error('Error saving nhanvien:', error.response?.data || error.message);
      toast.error(error.response?.data || 'L·ªói khi l∆∞u nh√¢n vi√™n');
    } finally {
      setIsLoading(false);
    }
  };

  const handleDeleteNhanVien = async (id) => {
    if (window.confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a nh√¢n vi√™n n√†y?')) {
      setIsLoading(true);
      try {
        await axiosInstance.delete(`/nhanvien/${id}`);
        toast.success('X√≥a nh√¢n vi√™n th√†nh c√¥ng');
        fetchNhanViens();
      } catch (error) {
        console.error('Error deleting nhanvien:', error.response?.data || error.message);
        toast.error(error.response?.data || 'L·ªói khi x√≥a nh√¢n vi√™n');
      } finally {
        setIsLoading(false);
      }
    }
  };

  // *** THAY TH·∫æ ƒêO·∫†N CODE TRONG openModal function (kho·∫£ng d√≤ng 220-240) ***

  const openModal = (nhanVien = null) => {
    setIsEdit(!!nhanVien);
    if (nhanVien) {
      const parsedDate = nhanVien.ngayThangNamSinh
        ? parse(nhanVien.ngayThangNamSinh, 'dd/MM/yyyy', new Date())
        : null;
      setCurrentNhanVien({
        ...nhanVien,
        ngayThangNamSinh: parsedDate,
        khoaPhong: { id: nhanVien.khoaPhong?.id || '' },
        chucVu: { id: nhanVien.chucVu?.id || '' },
        maNV: nhanVien.maNV || '',
        soDienThoai: nhanVien.soDienThoai || '',
      });
    } else {
      // *** C·∫¨P NH·∫¨T: Khi th√™m m·ªõi, set khoa ph√≤ng m·∫∑c ƒë·ªãnh cho restricted roles ***
      let defaultKhoaPhongId = '';

      if (role === 'NGUOICHAMCONG' || role === 'NGUOITONGHOP_1KP') {
        // C√°c role n√†y ch·ªâ ƒë∆∞·ª£c th√™m nh√¢n vi√™n v√†o khoa ph√≤ng c·ªßa m√¨nh
        defaultKhoaPhongId = khoaPhongId;
      } else if (role === 'ADMIN' || role === 'NGUOITONGHOP') {
        // ADMIN v√† NGUOITONGHOP c√≥ th·ªÉ ch·ªçn, nh∆∞ng ∆∞u ti√™n filter hi·ªán t·∫°i n·∫øu c√≥
        if (selectedKhoaPhongFilter) {
          defaultKhoaPhongId = selectedKhoaPhongFilter;
        }
        // Kh√¥ng set m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng c√≥ filter (ƒë·ªÉ user t·ª± ch·ªçn)
      }

      console.log('üè• Default khoa ph√≤ng for new employee:', {
        role,
        userKhoaPhongId: khoaPhongId,
        selectedFilter: selectedKhoaPhongFilter,
        defaultSet: defaultKhoaPhongId
      });

      setCurrentNhanVien({
        id: null,
        hoTen: '',
        email: '',
        maNV: '',
        ngayThangNamSinh: null,
        soDienThoai: '',
        khoaPhong: { id: defaultKhoaPhongId },
        chucVu: { id: '' },
      });
    }
    setShowModal(true);
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    if (name === 'khoaPhongId') {
      setCurrentNhanVien({ ...currentNhanVien, khoaPhong: { id: value } });
    } else if (name === 'chucVuId') {
      setCurrentNhanVien({ ...currentNhanVien, chucVu: { id: value } });
    } else {
      setCurrentNhanVien({ ...currentNhanVien, [name]: value });
    }
  };

  const handleDateChange = (date) => {
    setCurrentNhanVien({ ...currentNhanVien, ngayThangNamSinh: date });
  };

  const handlePageChange = (newPage) => {
    setPage(newPage);
  };

  const formatDate = (dateString) => {
    if (!dateString) return '-';
    try {
      const date = parse(dateString, 'dd/MM/yyyy', new Date());
      return format(date, 'dd/MM/yyyy');
    } catch {
      return '-';
    }
  };

  return (
    <div className="container-fluid px-4 py-3" style={{ backgroundColor: '#f8f9fc', minHeight: '100vh' }}>
      {/* Header */}
      <div className="d-flex justify-content-between align-items-center mb-4">
        <div>
          <h1 className="h3 mb-1 text-primary fw-bold">
            <i className="ri-team-line me-2"></i>Qu·∫£n L√Ω Nh√¢n S·ª±
          </h1>
          <p className="text-muted mb-0">
            Qu·∫£n l√Ω danh s√°ch nh√¢n vi√™n - {getCurrentKhoaPhongName()}
            {role === 'ADMIN' && (
              <span className="badge bg-success ms-2">ADMIN</span>
            )}
          </p>
        </div>
        <button
          className="btn btn-primary"
          onClick={() => openModal()}
          disabled={isLoading}
        >
          <i className="ri-user-add-line me-1"></i>
          Th√™m Nh√¢n Vi√™n
        </button>
      </div>

      {/* *** S·ª¨A L·∫†I: T√¨m ki·∫øm v√† filter (ch·ªâ ADMIN c√≥ filter khoa ph√≤ng) *** */}
      <div className="card border-0 shadow-sm mb-4">
        <div className="card-body">
          <div className="row align-items-end">
            <div className={role === 'ADMIN' ? 'col-md-6' : 'col-md-12'}>
              <label className="form-label fw-semibold">
                <i className="ri-search-line me-1"></i>T√¨m ki·∫øm nh√¢n vi√™n
              </label>
              <input
                type="text"
                className="form-control"
                placeholder="T√¨m ki·∫øm theo t√™n, email, m√£ NV..."
                value={searchTerm}
                onChange={(e) => {
                  setSearchTerm(e.target.value);
                  setPage(0);
                }}
              />
            </div>

            {/* *** CH·ªà HI·ªÇN TH·ªä FILTER KHOA PH√íNG CHO ADMIN *** */}
            {role === 'ADMIN' && (
              <div className="col-md-6">
                <label className="form-label fw-semibold">
                  <i className="ri-building-line me-1"></i>L·ªçc theo khoa ph√≤ng
                </label>
                <select
                  className="form-select"
                  value={selectedKhoaPhongFilter}
                  onChange={handleKhoaPhongFilterChange}
                  disabled={isLoading}
                >
                  <option value="">üåê T·∫•t c·∫£ khoa ph√≤ng</option>
                  {khoaPhongs.map((kp) => (
                    <option key={kp.id} value={kp.id}>
                      {kp.tenKhoaPhong}
                    </option>
                  ))}
                </select>
              </div>
            )}
          </div>

          {/* *** TH√äM TH√îNG TIN HI·ªÇN TH·ªä PH√ÇN QUY·ªÄN *** */}
          <div className="mt-3">
            <div className="row">
              <div className="col-12">
                <small className="text-muted">
                  {role === 'ADMIN' ? (
                    <span>
                      <i className="ri-shield-check-line me-1 text-success"></i>
                      <strong>Quy·ªÅn ADMIN:</strong> C√≥ th·ªÉ xem v√† qu·∫£n l√Ω nh√¢n vi√™n t·ª´ t·∫•t c·∫£ khoa ph√≤ng
                    </span>
                  ) : (
                    <span>
                      <i className="ri-building-2-line me-1 text-info"></i>
                      <strong>Ph·∫°m vi:</strong> Ch·ªâ ƒë∆∞·ª£c xem v√† qu·∫£n l√Ω nh√¢n vi√™n trong khoa ph√≤ng c·ªßa b·∫°n
                    </span>
                  )}
                </small>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* B·∫£ng danh s√°ch */}
      <div className="card border-0 shadow-sm">
        <div className="card-body p-0">
          {isLoading ? (
            <div className="text-center py-5">
              <div className="spinner-border text-primary" role="status">
                <span className="visually-hidden">ƒêang t·∫£i...</span>
              </div>
              <p className="text-muted mt-2">ƒêang t·∫£i danh s√°ch nh√¢n vi√™n...</p>
            </div>
          ) : nhanViens.length > 0 ? (
            <div className="table-responsive">
              <table className="table table-hover mb-0">
                <thead style={{ backgroundColor: '#4e73df', color: 'white' }}>
                  <tr>
                    <th className="text-center py-3">STT</th>
                    <th className="py-3">H·ªç T√™n</th>
                    <th className="py-3">Email</th>
                    <th className="py-3">M√£ NV</th>
                    <th className="py-3">Ng√†y Sinh</th>
                    <th className="py-3">SƒêT</th>
                    <th className="py-3">Khoa/Ph√≤ng</th>
                    <th className="py-3">Ch·ª©c V·ª•</th>
                    <th className="text-center py-3">H√†nh ƒë·ªông</th>
                  </tr>
                </thead>
                <tbody>
                  {nhanViens.map((nv, index) => (
                    <tr key={nv.id} className="border-bottom">
                      <td className="text-center align-middle py-3">{page * size + index + 1}</td>
                      <td className="align-middle py-3 fw-semibold">{nv.hoTen}</td>
                      <td className="align-middle py-3">
                        {nv.email ? (
                          <span className="text-primary">{nv.email}</span>
                        ) : (
                          <span className="text-muted">-</span>
                        )}
                      </td>
                      <td className="align-middle py-3">
                        {nv.maNV ? (
                          <span className="badge bg-primary" style={{ fontFamily: 'monospace', fontSize: '0.9em' }}>
                            {nv.maNV}
                          </span>
                        ) : (
                          '-'
                        )}
                      </td>
                      <td className="align-middle py-3">{formatDate(nv.ngayThangNamSinh)}</td>
                      <td className="align-middle py-3">{nv.soDienThoai || '-'}</td>
                      <td className="align-middle py-3">
                        <span className="badge bg-info" style={{ fontSize: '0.85em' }}>
                          {nv.khoaPhong?.tenKhoaPhong || '-'}
                        </span>
                      </td>
                      <td className="align-middle py-3">
                        {nv.chucVu?.tenChucVu ? (
                          <span className="badge bg-success" style={{ fontSize: '0.85em' }}>
                            {nv.chucVu.tenChucVu}
                          </span>
                        ) : (
                          '-'
                        )}
                      </td>
                      <td className="text-center align-middle py-3">
                        <button
                          className="btn btn-warning btn-sm me-2"
                          onClick={() => openModal(nv)}
                          disabled={isLoading}
                          title="S·ª≠a th√¥ng tin nh√¢n vi√™n"
                        >
                          <i className="ri-edit-line"></i>
                        </button>
                        <button
                          className="btn btn-danger btn-sm"
                          onClick={() => handleDeleteNhanVien(nv.id)}
                          disabled={isLoading}
                          title="X√≥a nh√¢n vi√™n"
                        >
                          <i className="ri-delete-bin-line"></i>
                        </button>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          ) : (
            <div className="text-center py-5">
              <i className="ri-user-unfollow-line text-muted" style={{ fontSize: '64px' }}></i>
              <h5 className="text-muted mt-3">Kh√¥ng c√≥ nh√¢n vi√™n n√†o</h5>
              <p className="text-muted">
                {searchTerm ?
                  `Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n v·ªõi t·ª´ kh√≥a "${searchTerm}"` :
                  'Kh√¥ng c√≥ nh√¢n vi√™n n√†o trong khoa ph√≤ng n√†y'
                }
              </p>
            </div>
          )}
        </div>
      </div>

      {/* *** TH√äM TH√îNG TIN TH·ªêNG K√ä *** */}
      {nhanViens.length > 0 && (
        <div className="mt-3">
          <small className="text-muted">
            <i className="ri-information-line me-1"></i>
            Hi·ªÉn th·ªã <strong>{nhanViens.length}</strong> nh√¢n vi√™n
            {searchTerm && ` - K·∫øt qu·∫£ t√¨m ki·∫øm cho "${searchTerm}"`}
            {role === 'ADMIN' && selectedKhoaPhongFilter &&
              ` - Khoa ph√≤ng: ${khoaPhongs.find(kp => kp.id.toString() === selectedKhoaPhongFilter)?.tenKhoaPhong}`
            }
          </small>
        </div>
      )}

      {/* Ph√¢n trang */}
      {totalPages > 1 && (
        <div className="mt-3">
          <nav aria-label="Page navigation">
            <ul className="pagination justify-content-center">
              <li className={`page-item ${page === 0 ? 'disabled' : ''}`}>
                <button className="page-link" onClick={() => handlePageChange(page - 1)}>
                  <i className="ri-arrow-left-line"></i> Tr∆∞·ªõc
                </button>
              </li>
              {Array.from({ length: totalPages }, (_, i) => (
                <li key={i} className={`page-item ${page === i ? 'active' : ''}`}>
                  <button className="page-link" onClick={() => handlePageChange(i)}>{i + 1}</button>
                </li>
              ))}
              <li className={`page-item ${page === totalPages - 1 ? 'disabled' : ''}`}>
                <button className="page-link" onClick={() => handlePageChange(page + 1)}>
                  Sau <i className="ri-arrow-right-line"></i>
                </button>
              </li>
            </ul>
          </nav>
        </div>
      )}

      {/* Modal th√™m/s·ª≠a nh√¢n vi√™n */}
      <Modal show={showModal} onHide={() => setShowModal(false)} size="lg">
        <Modal.Header closeButton>
          <Modal.Title className="text-primary fw-semibold">
            <i className={`ri-${isEdit ? 'edit' : 'user-add'}-line me-2`}></i>
            {isEdit ? 'S·ª≠a Nh√¢n Vi√™n' : 'Th√™m Nh√¢n Vi√™n'}
          </Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <Form>
            <div className="row">
              <div className="col-md-6">
                <Form.Group className="mb-3">
                  <Form.Label className="fw-semibold">
                    H·ªç T√™n <span className="text-danger">*</span>
                  </Form.Label>
                  <Form.Control
                    type="text"
                    name="hoTen"
                    value={currentNhanVien.hoTen}
                    onChange={handleChange}
                    placeholder="Nh·∫≠p h·ªç t√™n"
                    disabled={isLoading}
                    required
                  />
                </Form.Group>
              </div>
              <div className="col-md-6">
                <Form.Group className="mb-3">
                  <Form.Label className="fw-semibold">
                    Email <small className="text-muted">(t√πy ch·ªçn)</small>
                  </Form.Label>
                  <Form.Control
                    type="email"
                    name="email"
                    value={currentNhanVien.email}
                    onChange={handleChange}
                    placeholder="Nh·∫≠p email (kh√¥ng b·∫Øt bu·ªôc)"
                    disabled={isLoading}
                  />
                  <Form.Text className="text-muted">
                    <i className="ri-mail-line me-1"></i>
                    Email kh√¥ng b·∫Øt bu·ªôc nh∆∞ng n·∫øu nh·∫≠p ph·∫£i ƒë√∫ng ƒë·ªãnh d·∫°ng
                  </Form.Text>
                </Form.Group>
              </div>
            </div>

            <div className="row">
              <div className="col-md-6">
                <Form.Group className="mb-3">
                  <Form.Label className="fw-semibold">
                    M√£ NV <small className="text-muted">(t√πy ch·ªçn)</small>
                  </Form.Label>
                  <Form.Control
                    type="text"
                    name="maNV"
                    value={currentNhanVien.maNV}
                    onChange={handleChange}
                    placeholder="Nh·∫≠p m√£ nh√¢n vi√™n"
                    disabled={isLoading}
                    maxLength={50}
                    style={{ fontFamily: 'monospace' }}
                  />
                </Form.Group>
              </div>
              <div className="col-md-6">
                <Form.Group className="mb-3">
                  <Form.Label className="fw-semibold">
                    S·ªë ƒêi·ªán Tho·∫°i <small className="text-muted">(t√πy ch·ªçn)</small>
                  </Form.Label>
                  <Form.Control
                    type="text"
                    name="soDienThoai"
                    value={currentNhanVien.soDienThoai}
                    onChange={handleChange}
                    placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
                    disabled={isLoading}
                    maxLength={15}
                  />
                </Form.Group>
              </div>
            </div>

            <div className="row">
              <div className="col-md-6">
                <Form.Group className="mb-3">
                  <Form.Label className="fw-semibold">Ng√†y Sinh</Form.Label>
                  <DatePicker
                    selected={currentNhanVien.ngayThangNamSinh}
                    onChange={handleDateChange}
                    dateFormat="dd/MM/yyyy"
                    className="form-control"
                    placeholderText="Ch·ªçn ng√†y sinh"
                    disabled={isLoading}
                    showYearDropdown
                    yearDropdownItemNumber={100}
                    scrollableYearDropdown
                    maxDate={new Date()}
                  />
                </Form.Group>
              </div>
              {/* // *** THAY TH·∫æ ƒêO·∫†N CODE TRONG MODAL (kho·∫£ng d√≤ng 400-420) */}

              <div className="col-md-6">
                <Form.Group className="mb-3">
                  <Form.Label className="fw-semibold">
                    Khoa/Ph√≤ng <span className="text-danger">*</span>
                  </Form.Label>

                  {/* *** LOGIC M·ªöI: Disable cho NGUOICHAMCONG v√† NGUOITONGHOP_1KP *** */}
                  {(role === 'NGUOICHAMCONG' || role === 'NGUOITONGHOP_1KP') ? (
                    <Form.Control
                      type="text"
                      value={(() => {
                        // T√¨m t√™n khoa ph√≤ng ƒë·ªÉ hi·ªÉn th·ªã
                        if (isEdit && currentNhanVien.khoaPhong.id) {
                          // Khi s·ª≠a: Hi·ªÉn th·ªã khoa ph√≤ng c·ªßa nh√¢n vi√™n ƒë√≥
                          const selectedKhoaPhong = khoaPhongs.find((kp) => kp.id.toString() === currentNhanVien.khoaPhong.id.toString());
                          return selectedKhoaPhong?.tenKhoaPhong || 'Khoa ph√≤ng kh√¥ng x√°c ƒë·ªãnh';
                        } else {
                          // Khi th√™m m·ªõi: Hi·ªÉn th·ªã khoa ph√≤ng c·ªßa user hi·ªán t·∫°i
                          const userKhoaPhong = khoaPhongs.find((kp) => kp.id.toString() === khoaPhongId);
                          return userKhoaPhong?.tenKhoaPhong || 'Khoa ph√≤ng kh√¥ng x√°c ƒë·ªãnh';
                        }
                      })()}
                      disabled
                      className="bg-light"
                      style={{ cursor: 'not-allowed', color: '#6c757d' }}
                    />
                  ) : (
                    // *** CH·ªà CHO PH√âP CH·ªåN KHI L√Ä ADMIN HO·∫∂C NGUOITONGHOP ***
                    <Form.Select
                      name="khoaPhongId"
                      value={currentNhanVien.khoaPhong.id}
                      onChange={handleChange}
                      disabled={isLoading || khoaPhongs.length === 0}
                      required
                    >
                      <option value="">Ch·ªçn Khoa/Ph√≤ng</option>
                      {khoaPhongs.map((kp) => (
                        <option key={kp.id} value={kp.id}>
                          {kp.tenKhoaPhong}
                        </option>
                      ))}
                    </Form.Select>
                  )}

                  {/* *** TH√äM GHI CH√ö GI·∫¢I TH√çCH *** */}
                  <Form.Text className="text-muted">
                    {(role === 'NGUOICHAMCONG' || role === 'NGUOITONGHOP_1KP') ? (
                      <span>
                        <i className="ri-lock-line me-1"></i>
                        {isEdit ?
                          'Kh√¥ng th·ªÉ thay ƒë·ªïi khoa ph√≤ng c·ªßa nh√¢n vi√™n' :
                          'Ch·ªâ c√≥ th·ªÉ th√™m nh√¢n vi√™n v√†o khoa ph√≤ng c·ªßa b·∫°n'
                        }
                      </span>
                    ) : (
                      <span>
                        <i className="ri-building-line me-1"></i>
                        {isEdit ?
                          'C√≥ th·ªÉ thay ƒë·ªïi khoa ph√≤ng c·ªßa nh√¢n vi√™n' :
                          'Ch·ªçn khoa ph√≤ng cho nh√¢n vi√™n m·ªõi'
                        }
                      </span>
                    )}
                  </Form.Text>
                </Form.Group>
              </div>
            </div>

            <div className="row">
              <div className="col-md-6">
                <Form.Group className="mb-3">
                  <Form.Label className="fw-semibold">
                    Ch·ª©c V·ª• <small className="text-muted">(t√πy ch·ªçn)</small>
                  </Form.Label>
                  <Form.Select
                    name="chucVuId"
                    value={currentNhanVien.chucVu.id}
                    onChange={handleChange}
                    disabled={isLoading || chucVus.length === 0}
                  >
                    <option value="">Ch·ªçn Ch·ª©c V·ª•</option>
                    {chucVus.map((cv) => (
                      <option key={cv.id} value={cv.id}>
                        {cv.tenChucVu}
                      </option>
                    ))}
                  </Form.Select>
                </Form.Group>
              </div>
            </div>
          </Form>
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={() => setShowModal(false)} disabled={isLoading}>
            <i className="ri-close-line me-1"></i>
            H·ªßy
          </Button>
          <Button variant="primary" onClick={handleSaveNhanVien} disabled={isLoading}>
            {isLoading ? (
              <>
                <div className="spinner-border spinner-border-sm me-2" role="status">
                  <span className="visually-hidden">Loading...</span>
                </div>
                ƒêang l∆∞u...
              </>
            ) : (
              <>
                <i className={`ri-${isEdit ? 'save' : 'add'}-line me-1`}></i>
                {isEdit ? 'C·∫≠p nh·∫≠t' : 'L∆∞u'}
              </>
            )}
          </Button>
        </Modal.Footer>
      </Modal>
    </div>
  );
}

export default QuanLyDanhSachNhanSu;