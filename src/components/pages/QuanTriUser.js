import React, { useEffect, useState } from 'react';
import { Table, Button, Modal, Form, InputGroup, Container, Pagination, Row, Col, Alert } from 'react-bootstrap';
import { FaEye, FaEyeSlash } from 'react-icons/fa';
import { toast } from 'react-toastify';
import axiosInstance from '../../utils/axiosInstance';
import 'react-toastify/dist/ReactToastify.css';

const QuanTriUser = () => {
  const [users, setUsers] = useState([]);
  const [khoaPhongs, setKhoaPhongs] = useState([]);
  const [showAddModal, setShowAddModal] = useState(false);
  const [showEditModal, setShowEditModal] = useState(false);
  const [showPasswordModal, setShowPasswordModal] = useState(false);
  const [selectedUser, setSelectedUser] = useState(null);
  const [formData, setFormData] = useState({
    tenDangNhap: '',
    email: '',
    matKhau: '',
    role: { tenVaiTro: '' },
    khoaPhong: { id: '' },
  });
  const [newPassword, setNewPassword] = useState('');
  const [showAddPassword, setShowAddPassword] = useState(false);
  const [showEditPassword, setShowEditPassword] = useState(false);
  const [showNewPassword, setShowNewPassword] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [currentPage, setCurrentPage] = useState(1);
  
  // *** TH√äM M·ªöI: State cho filter khoa ph√≤ng ***
  const [selectedKhoaPhongFilter, setSelectedKhoaPhongFilter] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  
  const usersPerPage = 10;

  // *** TH√äM M·ªöI: Ki·ªÉm tra quy·ªÅn ADMIN ***
  const role = localStorage.getItem('role');

  // L·∫•y danh s√°ch ng∆∞·ªùi d√πng v√† khoa/ph√≤ng
  useEffect(() => {
    // *** KI·ªÇM TRA QUY·ªÄN ADMIN ***
    if (role !== 'ADMIN') {
      toast.error('B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p trang n√†y!');
      return;
    }
    fetchUsers();
    fetchKhoaPhongs();
  }, [role]);

  const fetchUsers = async () => {
    setIsLoading(true);
    try {
      const response = await axiosInstance.get('/user');
      setUsers(response.data);
      setCurrentPage(1); // Reset v·ªÅ trang 1 khi l√†m m·ªõi danh s√°ch
    } catch (error) {
      toast.error('L·ªói khi l·∫•y danh s√°ch ng∆∞·ªùi d√πng: ' + error.message);
    } finally {
      setIsLoading(false);
    }
  };

  const fetchKhoaPhongs = async () => {
    try {
      const response = await axiosInstance.get('/khoa-phong');
      setKhoaPhongs(response.data);
    } catch (error) {
      toast.error('L·ªói khi l·∫•y danh s√°ch khoa/ph√≤ng: ' + error.message);
    }
  };

  // *** TH√äM M·ªöI: X·ª≠ l√Ω filter khoa ph√≤ng ***
  const handleKhoaPhongFilterChange = (e) => {
    setSelectedKhoaPhongFilter(e.target.value);
    setCurrentPage(1); // Reset v·ªÅ trang ƒë·∫ßu ti√™n
  };

  // *** TH√äM M·ªöI: L·∫•y t√™n khoa ph√≤ng ***
  const getKhoaPhongName = (khoaPhongId) => {
    const khoaPhong = khoaPhongs.find(kp => kp.id.toString() === khoaPhongId.toString());
    return khoaPhong?.tenKhoaPhong || 'N/A';
  };

  // X·ª≠ l√Ω m·ªü modal th√™m ng∆∞·ªùi d√πng
  const handleShowAddModal = () => {
    setFormData({
      tenDangNhap: '',
      email: '',
      matKhau: '',
      role: { tenVaiTro: '' },
      khoaPhong: { id: selectedKhoaPhongFilter || '' }, // *** ∆Øu ti√™n filter hi·ªán t·∫°i ***
    });
    setShowAddPassword(false);
    setShowAddModal(true);
  };

  // X·ª≠ l√Ω m·ªü modal s·ª≠a ng∆∞·ªùi d√πng
  const handleShowEditModal = (user) => {
    setSelectedUser(user);
    setFormData({
      tenDangNhap: user.tenDangNhap,
      email: user.email,
      matKhau: '',
      role: { tenVaiTro: user.role.tenVaiTro },
      khoaPhong: { id: user.khoaPhong.id },
    });
    setShowEditPassword(false);
    setShowEditModal(true);
  };

  // X·ª≠ l√Ω m·ªü modal ƒë·ªïi m·∫≠t kh·∫©u
  const handleShowPasswordModal = (user) => {
    setSelectedUser(user);
    setNewPassword('');
    setShowNewPassword(false);
    setShowPasswordModal(true);
  };

  // X·ª≠ l√Ω th√™m ng∆∞·ªùi d√πng
  const handleAddUser = async () => {
    setIsLoading(true);
    try {
      await axiosInstance.post('/user', formData);
      toast.success('Th√™m ng∆∞·ªùi d√πng th√†nh c√¥ng');
      setShowAddModal(false);
      fetchUsers();
    } catch (error) {
      toast.error('L·ªói khi th√™m ng∆∞·ªùi d√πng: ' + (error.response?.data || error.message));
    } finally {
      setIsLoading(false);
    }
  };

  // X·ª≠ l√Ω s·ª≠a ng∆∞·ªùi d√πng
  const handleEditUser = async () => {
    setIsLoading(true);
    try {
      await axiosInstance.put(`/user/${selectedUser.id}`, formData);
      toast.success('C·∫≠p nh·∫≠t ng∆∞·ªùi d√πng th√†nh c√¥ng');
      setShowEditModal(false);
      fetchUsers();
    } catch (error) {
      toast.error('L·ªói khi c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng: ' + (error.response?.data || error.message));
    } finally {
      setIsLoading(false);
    }
  };

  // X·ª≠ l√Ω x√≥a ng∆∞·ªùi d√πng
  const handleDeleteUser = async (id) => {
    if (window.confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a ng∆∞·ªùi d√πng n√†y?')) {
      setIsLoading(true);
      try {
        await axiosInstance.delete(`/user/${id}`);
        toast.success('X√≥a ng∆∞·ªùi d√πng th√†nh c√¥ng');
        fetchUsers();
      } catch (error) {
        toast.error('L·ªói khi x√≥a ng∆∞·ªùi d√πng: ' + (error.response?.data || error.message));
      } finally {
        setIsLoading(false);
      }
    }
  };

  // X·ª≠ l√Ω ƒë·ªïi m·∫≠t kh·∫©u
  const handleChangePassword = async () => {
    setIsLoading(true);
    try {
      await axiosInstance.put(`/user/${selectedUser.id}/password`, { newPassword });
      toast.success('ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng');
      setShowPasswordModal(false);
    } catch (error) {
      toast.error('L·ªói khi ƒë·ªïi m·∫≠t kh·∫©u: ' + (error.response?.data || error.message));
    } finally {
      setIsLoading(false);
    }
  };

  // X·ª≠ l√Ω thay ƒë·ªïi gi√° tr·ªã form
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    if (name === 'role') {
      setFormData({ ...formData, role: { tenVaiTro: value } });
    } else if (name === 'khoaPhongId') {
      setFormData({ ...formData, khoaPhong: { id: value } });
    } else {
      setFormData({ ...formData, [name]: value });
    }
  };

  // X·ª≠ l√Ω t√¨m ki·∫øm
  const handleSearchChange = (e) => {
    setSearchTerm(e.target.value);
    setCurrentPage(1); // Reset v·ªÅ trang 1 khi thay ƒë·ªïi t√¨m ki·∫øm
  };

  // *** C·∫¨P NH·∫¨T: L·ªçc ng∆∞·ªùi d√πng v·ªõi c·∫£ search v√† filter khoa ph√≤ng ***
  const filteredUsers = users.filter((user) => {
    const matchesSearch = 
      user.tenDangNhap.toLowerCase().includes(searchTerm.toLowerCase()) ||
      user.email.toLowerCase().includes(searchTerm.toLowerCase()) ||
      user.role.tenVaiTro.toLowerCase().includes(searchTerm.toLowerCase());
    
    const matchesKhoaPhong = 
      !selectedKhoaPhongFilter || 
      user.khoaPhong.id.toString() === selectedKhoaPhongFilter;
    
    return matchesSearch && matchesKhoaPhong;
  });

  // T√≠nh to√°n ph√¢n trang
  const totalPages = Math.ceil(filteredUsers.length / usersPerPage);
  const indexOfLastUser = currentPage * usersPerPage;
  const indexOfFirstUser = indexOfLastUser - usersPerPage;
  const currentUsers = filteredUsers.slice(indexOfFirstUser, indexOfLastUser);

  // X·ª≠ l√Ω thay ƒë·ªïi trang
  const handlePageChange = (pageNumber) => {
    setCurrentPage(pageNumber);
  };

  // *** KI·ªÇM TRA QUY·ªÄN ADMIN ***
  if (role !== 'ADMIN') {
    return (
      <Container className="mt-5">
        <Alert variant="danger" className="text-center">
          <h4>üö´ Truy c·∫≠p b·ªã t·ª´ ch·ªëi</h4>
          <p>B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p trang Qu·∫£n tr·ªã User. Ch·ªâ ADMIN m·ªõi c√≥ th·ªÉ truy c·∫≠p.</p>
        </Alert>
      </Container>
    );
  }

  return (
    <Container fluid className="px-4 py-3" style={{ backgroundColor: '#f8f9fc', minHeight: '100vh' }}>
      {/* *** HEADER C·∫¢I THI·ªÜN *** */}
      <div className="d-flex justify-content-between align-items-center mb-4">
        <div>
          <h1 className="h3 mb-1 text-primary fw-bold">
            <i className="ri-admin-line me-2"></i>Qu·∫£n Tr·ªã User
          </h1>
          <p className="text-muted mb-0">
            Qu·∫£n l√Ω t√†i kho·∫£n ng∆∞·ªùi d√πng h·ªá th·ªëng
            <span className="badge bg-success ms-2">ADMIN ONLY</span>
          </p>
        </div>
        <button 
          className="btn btn-primary" 
          onClick={handleShowAddModal}
          disabled={isLoading}
        >
          <i className="ri-user-add-line me-1"></i>
          Th√™m ng∆∞·ªùi d√πng
        </button>
      </div>

      {/* *** FILTER V√Ä SEARCH SECTION *** */}
      <div className="card border-0 shadow-sm mb-4">
        <div className="card-body">
          <Row className="align-items-end">
            <Col md={6}>
              <label className="form-label fw-semibold">
                <i className="ri-search-line me-1"></i>T√¨m ki·∫øm ng∆∞·ªùi d√πng
              </label>
              <Form.Control
                type="text"
                placeholder="T√¨m ki·∫øm theo t√™n ƒëƒÉng nh·∫≠p, email, vai tr√≤..."
                value={searchTerm}
                onChange={handleSearchChange}
              />
            </Col>
            <Col md={6}>
              <label className="form-label fw-semibold">
                <i className="ri-building-line me-1"></i>L·ªçc theo khoa ph√≤ng
              </label>
              <Form.Select
                value={selectedKhoaPhongFilter}
                onChange={handleKhoaPhongFilterChange}
                disabled={isLoading}
              >
                <option value="">üåê T·∫•t c·∫£ khoa ph√≤ng</option>
                {khoaPhongs.map((kp) => (
                  <option key={kp.id} value={kp.id}>
                    {kp.tenKhoaPhong}
                  </option>
                ))}
              </Form.Select>
            </Col>
          </Row>

          {/* *** TH√îNG TIN TH·ªêNG K√ä *** */}
          <div className="mt-3">
            <small className="text-muted">
              <i className="ri-information-line me-1"></i>
              Hi·ªÉn th·ªã <strong>{filteredUsers.length}</strong> / <strong>{users.length}</strong> ng∆∞·ªùi d√πng
              {selectedKhoaPhongFilter && (
                <span> - Khoa ph√≤ng: <strong>{getKhoaPhongName(selectedKhoaPhongFilter)}</strong></span>
              )}
              {searchTerm && (
                <span> - T√¨m ki·∫øm: "<strong>{searchTerm}</strong>"</span>
              )}
            </small>
          </div>
        </div>
      </div>

      {/* *** B·∫¢NG DANH S√ÅCH C·∫¢I THI·ªÜN *** */}
      <div className="card border-0 shadow-sm">
        <div className="card-body p-0">
          {isLoading ? (
            <div className="text-center py-5">
              <div className="spinner-border text-primary" role="status">
                <span className="visually-hidden">ƒêang t·∫£i...</span>
              </div>
              <p className="text-muted mt-2">ƒêang t·∫£i danh s√°ch ng∆∞·ªùi d√πng...</p>
            </div>
          ) : currentUsers.length > 0 ? (
            <div className="table-responsive">
              <Table className="table table-hover mb-0">
                <thead style={{ backgroundColor: '#4e73df', color: 'white' }}>
                  <tr>
                    <th className="text-center py-3">ID</th>
                    <th className="py-3">T√™n ƒëƒÉng nh·∫≠p</th>
                    <th className="py-3">Email</th>
                    <th className="py-3">Vai tr√≤</th>
                    <th className="py-3">Khoa/Ph√≤ng</th>
                    <th className="text-center py-3">H√†nh ƒë·ªông</th>
                  </tr>
                </thead>
                <tbody>
                  {currentUsers.map((user) => (
                    <tr key={user.id}>
                      <td className="text-center align-middle py-3">{user.id}</td>
                      <td className="align-middle py-3 fw-semibold">{user.tenDangNhap}</td>
                      <td className="align-middle py-3">{user.email}</td>
                      <td className="align-middle py-3">
                        <span className={`badge ${
                          user.role.tenVaiTro === 'ADMIN' ? 'bg-danger' :
                          user.role.tenVaiTro === 'NGUOITONGHOP' ? 'bg-warning' :
                          user.role.tenVaiTro === 'NGUOITONGHOP_1KP' ? 'bg-info' :
                          'bg-primary'
                        }`} style={{ fontSize: '0.85em' }}>
                          {user.role.tenVaiTro}
                        </span>
                      </td>
                      <td className="align-middle py-3">
                        <span className="badge bg-secondary" style={{ fontSize: '0.85em' }}>
                          {user.khoaPhong.tenKhoaPhong}
                        </span>
                      </td>
                      <td className="text-center align-middle py-3">
                        <Button
                          variant="warning"
                          size="sm"
                          className="me-1 mb-1"
                          onClick={() => handleShowEditModal(user)}
                          disabled={isLoading}
                          title="S·ª≠a th√¥ng tin"
                        >
                          <i className="ri-edit-line"></i>
                        </Button>
                        <Button
                          variant="danger"
                          size="sm"
                          className="me-1 mb-1"
                          onClick={() => handleDeleteUser(user.id)}
                          disabled={isLoading}
                          title="X√≥a ng∆∞·ªùi d√πng"
                        >
                          <i className="ri-delete-bin-line"></i>
                        </Button>
                        <Button
                          variant="info"
                          size="sm"
                          className="mb-1"
                          onClick={() => handleShowPasswordModal(user)}
                          disabled={isLoading}
                          title="ƒê·ªïi m·∫≠t kh·∫©u"
                        >
                          <i className="ri-lock-password-line"></i>
                        </Button>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </Table>
            </div>
          ) : (
            <div className="text-center py-5">
              <i className="ri-user-unfollow-line text-muted" style={{ fontSize: '64px' }}></i>
              <h5 className="text-muted mt-3">Kh√¥ng c√≥ ng∆∞·ªùi d√πng n√†o</h5>
              <p className="text-muted">
                {searchTerm || selectedKhoaPhongFilter ? 
                  'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi ƒëi·ªÅu ki·ªán l·ªçc hi·ªán t·∫°i' : 
                  'Ch∆∞a c√≥ ng∆∞·ªùi d√πng n√†o trong h·ªá th·ªëng'
                }
              </p>
            </div>
          )}
        </div>
      </div>

      {/* *** PH√ÇN TRANG C·∫¢I THI·ªÜN *** */}
      {totalPages > 1 && (
        <div className="mt-4">
          <nav aria-label="Page navigation">
            <ul className="pagination justify-content-center">
              <li className={`page-item ${currentPage === 1 ? 'disabled' : ''}`}>
                <button 
                  className="page-link" 
                  onClick={() => handlePageChange(currentPage - 1)}
                  disabled={currentPage === 1}
                >
                  <i className="ri-arrow-left-line"></i> Tr∆∞·ªõc
                </button>
              </li>
              {Array.from({ length: totalPages }, (_, i) => (
                <li key={i + 1} className={`page-item ${currentPage === i + 1 ? 'active' : ''}`}>
                  <button 
                    className="page-link" 
                    onClick={() => handlePageChange(i + 1)}
                  >
                    {i + 1}
                  </button>
                </li>
              ))}
              <li className={`page-item ${currentPage === totalPages ? 'disabled' : ''}`}>
                <button 
                  className="page-link" 
                  onClick={() => handlePageChange(currentPage + 1)}
                  disabled={currentPage === totalPages}
                >
                  Sau <i className="ri-arrow-right-line"></i>
                </button>
              </li>
            </ul>
          </nav>
        </div>
      )}

      {/* Modal th√™m ng∆∞·ªùi d√πng */}
      <Modal show={showAddModal} onHide={() => setShowAddModal(false)} size="lg">
        <Modal.Header closeButton>
          <Modal.Title className="text-primary fw-semibold">
            <i className="ri-user-add-line me-2"></i>Th√™m ng∆∞·ªùi d√πng
          </Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <Form>
            <div className="row">
              <div className="col-md-6">
                <Form.Group className="mb-3">
                  <Form.Label className="fw-semibold">
                    T√™n ƒëƒÉng nh·∫≠p <span className="text-danger">*</span>
                  </Form.Label>
                  <Form.Control
                    type="text"
                    name="tenDangNhap"
                    value={formData.tenDangNhap}
                    onChange={handleInputChange}
                    placeholder="Nh·∫≠p t√™n ƒëƒÉng nh·∫≠p"
                    required
                    disabled={isLoading}
                  />
                </Form.Group>
              </div>
              <div className="col-md-6">
                <Form.Group className="mb-3">
                  <Form.Label className="fw-semibold">
                    Email <span className="text-danger">*</span>
                  </Form.Label>
                  <Form.Control
                    type="email"
                    name="email"
                    value={formData.email}
                    onChange={handleInputChange}
                    placeholder="Nh·∫≠p email"
                    required
                    disabled={isLoading}
                  />
                </Form.Group>
              </div>
            </div>

            <Form.Group className="mb-3">
              <Form.Label className="fw-semibold">
                M·∫≠t kh·∫©u <span className="text-danger">*</span>
              </Form.Label>
              <InputGroup>
                <Form.Control
                  type={showAddPassword ? 'text' : 'password'}
                  name="matKhau"
                  value={formData.matKhau}
                  onChange={handleInputChange}
                  placeholder="Nh·∫≠p m·∫≠t kh·∫©u"
                  required
                  disabled={isLoading}
                />
                <InputGroup.Text
                  onClick={() => setShowAddPassword(!showAddPassword)}
                  style={{ cursor: 'pointer' }}
                >
                  {showAddPassword ? <FaEyeSlash /> : <FaEye />}
                </InputGroup.Text>
              </InputGroup>
            </Form.Group>

            <div className="row">
              <div className="col-md-6">
                <Form.Group className="mb-3">
                  <Form.Label className="fw-semibold">
                    Vai tr√≤ <span className="text-danger">*</span>
                  </Form.Label>
                  <Form.Select
                    name="role"
                    value={formData.role.tenVaiTro}
                    onChange={handleInputChange}
                    required
                    disabled={isLoading}
                  >
                    <option value="">Ch·ªçn vai tr√≤</option>
                    <option value="ADMIN">ADMIN</option>
                    <option value="NGUOICHAMCONG">NGUOICHAMCONG</option>
                    <option value="NGUOITONGHOP">NGUOITONGHOP</option>
                    <option value="NGUOITONGHOP_1KP">NGUOITONGHOP_1KP</option>
                  </Form.Select>
                </Form.Group>
              </div>
              <div className="col-md-6">
                <Form.Group className="mb-3">
                  <Form.Label className="fw-semibold">
                    Khoa/Ph√≤ng <span className="text-danger">*</span>
                  </Form.Label>
                  <Form.Select
                    name="khoaPhongId"
                    value={formData.khoaPhong.id}
                    onChange={handleInputChange}
                    required
                    disabled={isLoading}
                  >
                    <option value="">Ch·ªçn khoa/ph√≤ng</option>
                    {khoaPhongs.map((khoaPhong) => (
                      <option key={khoaPhong.id} value={khoaPhong.id}>
                        {khoaPhong.tenKhoaPhong}
                      </option>
                    ))}
                  </Form.Select>
                </Form.Group>
              </div>
            </div>
          </Form>
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={() => setShowAddModal(false)} disabled={isLoading}>
            <i className="ri-close-line me-1"></i>ƒê√≥ng
          </Button>
          <Button variant="primary" onClick={handleAddUser} disabled={isLoading}>
            {isLoading ? (
              <>
                <div className="spinner-border spinner-border-sm me-2" role="status">
                  <span className="visually-hidden">Loading...</span>
                </div>
                ƒêang th√™m...
              </>
            ) : (
              <>
                <i className="ri-add-line me-1"></i>Th√™m
              </>
            )}
          </Button>
        </Modal.Footer>
      </Modal>

      {/* Modal s·ª≠a ng∆∞·ªùi d√πng */}
      <Modal show={showEditModal} onHide={() => setShowEditModal(false)} size="lg">
        <Modal.Header closeButton>
          <Modal.Title className="text-primary fw-semibold">
            <i className="ri-edit-line me-2"></i>S·ª≠a ng∆∞·ªùi d√πng
          </Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <Form>
            <div className="row">
              <div className="col-md-6">
                <Form.Group className="mb-3">
                  <Form.Label className="fw-semibold">
                    T√™n ƒëƒÉng nh·∫≠p <span className="text-danger">*</span>
                  </Form.Label>
                  <Form.Control
                    type="text"
                    name="tenDangNhap"
                    value={formData.tenDangNhap}
                    onChange={handleInputChange}
                    required
                    disabled={isLoading}
                  />
                </Form.Group>
              </div>
              <div className="col-md-6">
                <Form.Group className="mb-3">
                  <Form.Label className="fw-semibold">
                    Email <span className="text-danger">*</span>
                  </Form.Label>
                  <Form.Control
                    type="email"
                    name="email"
                    value={formData.email}
                    onChange={handleInputChange}
                    required
                    disabled={isLoading}
                  />
                </Form.Group>
              </div>
            </div>

            <Form.Group className="mb-3">
              <Form.Label className="fw-semibold">
                M·∫≠t kh·∫©u <small className="text-muted">(ƒë·ªÉ tr·ªëng n·∫øu kh√¥ng thay ƒë·ªïi)</small>
              </Form.Label>
              <InputGroup>
                <Form.Control
                  type={showEditPassword ? 'text' : 'password'}
                  name="matKhau"
                  value={formData.matKhau}
                  onChange={handleInputChange}
                  placeholder="Nh·∫≠p m·∫≠t kh·∫©u m·ªõi (ho·∫∑c ƒë·ªÉ tr·ªëng)"
                  disabled={isLoading}
                />
                <InputGroup.Text
                  onClick={() => setShowEditPassword(!showEditPassword)}
                  style={{ cursor: 'pointer' }}
                >
                  {showEditPassword ? <FaEyeSlash /> : <FaEye />}
                </InputGroup.Text>
              </InputGroup>
            </Form.Group>

            <div className="row">
              <div className="col-md-6">
                <Form.Group className="mb-3">
                  <Form.Label className="fw-semibold">
                    Vai tr√≤ <span className="text-danger">*</span>
                  </Form.Label>
                  <Form.Select
                    name="role"
                    value={formData.role.tenVaiTro}
                    onChange={handleInputChange}
                    required
                    disabled={isLoading}
                  >
                    <option value="">Ch·ªçn vai tr√≤</option>
                    <option value="ADMIN">ADMIN</option>
                    <option value="NGUOICHAMCONG">NGUOICHAMCONG</option>
                    <option value="NGUOITONGHOP">NGUOITONGHOP</option>
                    <option value="NGUOITONGHOP_1KP">NGUOITONGHOP_1KP</option>
                  </Form.Select>
                </Form.Group>
              </div>
              <div className="col-md-6">
                <Form.Group className="mb-3">
                  <Form.Label className="fw-semibold">
                    Khoa/Ph√≤ng <span className="text-danger">*</span>
                  </Form.Label>
                  <Form.Select
                    name="khoaPhongId"
                    value={formData.khoaPhong.id}
                    onChange={handleInputChange}
                    required
                    disabled={isLoading}
                  >
                    <option value="">Ch·ªçn khoa/ph√≤ng</option>
                    {khoaPhongs.map((khoaPhong) => (
                      <option key={khoaPhong.id} value={khoaPhong.id}>
                        {khoaPhong.tenKhoaPhong}
                      </option>
                    ))}
                  </Form.Select>
                </Form.Group>
              </div>
            </div>
          </Form>
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={() => setShowEditModal(false)} disabled={isLoading}>
            <i className="ri-close-line me-1"></i>ƒê√≥ng
          </Button>
          <Button variant="primary" onClick={handleEditUser} disabled={isLoading}>
            {isLoading ? (
              <>
                <div className="spinner-border spinner-border-sm me-2" role="status">
                  <span className="visually-hidden">Loading...</span>
                </div>
                ƒêang l∆∞u...
              </>
            ) : (
              <>
                <i className="ri-save-line me-1"></i>L∆∞u
              </>
            )}
          </Button>
        </Modal.Footer>
      </Modal>

      {/* Modal ƒë·ªïi m·∫≠t kh·∫©u */}
      <Modal show={showPasswordModal} onHide={() => setShowPasswordModal(false)}>
        <Modal.Header closeButton>
          <Modal.Title className="text-primary fw-semibold">
            <i className="ri-lock-password-line me-2"></i>ƒê·ªïi m·∫≠t kh·∫©u
          </Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <Form>
            <Form.Group className="mb-3">
              <Form.Label className="fw-semibold">
                M·∫≠t kh·∫©u m·ªõi <span className="text-danger">*</span>
              </Form.Label>
              <InputGroup>
                <Form.Control
                  type={showNewPassword ? 'text' : 'password'}
                  value={newPassword}
                  onChange={(e) => setNewPassword(e.target.value)}
                  placeholder="Nh·∫≠p m·∫≠t kh·∫©u m·ªõi"
                  required
                  disabled={isLoading}
                />
                <InputGroup.Text
                  onClick={() => setShowNewPassword(!showNewPassword)}
                  style={{ cursor: 'pointer' }}
                >
                  {showNewPassword ? <FaEyeSlash /> : <FaEye />}
                </InputGroup.Text>
              </InputGroup>
              <Form.Text className="text-muted">
                <i className="ri-information-line me-1"></i>
                M·∫≠t kh·∫©u n√™n c√≥ √≠t nh·∫•t 6 k√Ω t·ª± v√† bao g·ªìm ch·ªØ, s·ªë
              </Form.Text>
            </Form.Group>
          </Form>
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={() => setShowPasswordModal(false)} disabled={isLoading}>
            <i className="ri-close-line me-1"></i>ƒê√≥ng
          </Button>
          <Button variant="primary" onClick={handleChangePassword} disabled={isLoading || !newPassword.trim()}>
            {isLoading ? (
              <>
                <div className="spinner-border spinner-border-sm me-2" role="status">
                  <span className="visually-hidden">Loading...</span>
                </div>
                ƒêang l∆∞u...
              </>
            ) : (
              <>
                <i className="ri-save-line me-1"></i>L∆∞u
              </>
            )}
          </Button>
        </Modal.Footer>
      </Modal>
    </Container>
  );
};

export default QuanTriUser;